{"version":3,"file":"multiplication-bundle.js","mappings":"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","sources":["webpack://math-excercises/./src/multiplication.ts"],"sourcesContent":["class XYMultiplicationHistoryEntry {\n    private _xy : XY;\n\n    private _time : number;\n    private _resultCorrect : boolean;\n    private _timestamp : number;\n\n    constructor(xy: XY, time: number, resultCorrect: boolean, timestamp: number) {\n        this._xy = xy;\n        this._time = time;\n        this._resultCorrect = resultCorrect;\n        this._timestamp = timestamp;\n    }\n\n    get xy(): XY {\n        return this._xy;\n    }\n\n    get time(): number {\n        return this._time;\n    }\n\n    get resultCorrect(): boolean {\n        return this._resultCorrect;\n    }\n\n    get timestamp(): number {\n        return this._timestamp;\n    }\n\n    serialize = () => {\n        return {\n            \"time\": this._time,\n            \"resultCorrect\": this._resultCorrect,\n            \"timestamp\" : this._timestamp,\n            \"xy\": this.xy.serialize()\n        };\n    }\n\n    // static unserialize = ( json : [string, any] ) => {\n    //     return new XYMultiplicationHistoryEntry(\n    //         XY.unserialize(json.xy),\n    //         json.time,\n    //         json.resultCorrect,\n    //         json.timestamp\n    //     );\n    // }\n}\n\nclass XYMultiplicationHistory {\n    private _xy : XY;\n    private _history : XYMultiplicationHistoryEntry[];\n\n    constructor(xy: XY, history : XYMultiplicationHistoryEntry[] = []) {\n        this._xy = xy;\n        this._history = history;\n    }\n\n    get xy(): XY {\n        return this._xy;\n    }\n\n    /**\n     * Checks if two xys are the same. (4,5) != (5,4)\n     * @param xy\n     */\n    equal = (xy: XY) : boolean => {\n        return this._xy.x === xy.x && this._xy.y === xy.y;\n    }\n\n    registerResult = (resultOk: boolean, time: number) => {\n        this._history.push(\n            new XYMultiplicationHistoryEntry(\n                this._xy,\n                time,\n                resultOk,\n                Date.now()\n            )\n        );\n    };\n\n    get history(): XYMultiplicationHistoryEntry[] {\n        return this._history;\n    }\n\n    serialize = () => {\n        return {\n            \"xy\": this._xy.serialize(),\n            \"history\": this._history.map((historyEntry : XYMultiplicationHistoryEntry) => historyEntry.serialize())\n        };\n    }\n\n    // unserialize = (json) => {\n    //     return new XYMultiplicationHistory(\n    //         XY.unserialize(json.xy),\n    //         json.history.map( entry => XYMultiplicationHistoryEntry.unserialize(entry))\n    //     );\n    // }\n}\n\nclass ScoreBoard {\n    private _scoreboard : XYMultiplicationHistory[];\n\n    constructor(xys : XY[]) {\n        this._scoreboard = [];\n        xys.forEach(xy => this._scoreboard.push(new XYMultiplicationHistory(xy)));\n    }\n\n    registerResult = (xy : XY, resultOk : boolean, time : number) => {\n        const scoreHistory = this._scoreboard.find(_xy => _xy.equal(xy));\n        if(undefined === scoreHistory) {\n            throw new Error(\"Couldn't find score history for xy: \" + xy.x + \",\" + xy.y);\n        }\n\n        scoreHistory.registerResult(resultOk, time);\n    }\n\n\n    get scoreboard(): XYMultiplicationHistory[] {\n        return this._scoreboard;\n    }\n}\n\nclass XY {\n    private readonly _x : number;\n    private readonly _y : number;\n\n    constructor(x: number, y: number) {\n        this._x = x;\n        this._y = y;\n    }\n\n    get x(): number {\n        return this._x;\n    }\n\n    get y(): number {\n        return this._y;\n    }\n\n    result = () : number => {\n        return this.x * this.y;\n    }\n\n    serialize = () : {x: number, y: number} => {\n        return { \"x\": this._x, \"y\": this._y };\n    }\n\n    static unserialize = ( json: { x : number, y: number}) => {\n        return new XY(json.x, json.y);\n    }\n\n    inverse = () : XY => {\n        return new XY(this._y, this._x);\n    }\n}\n\nclass DataSet {\n    protected dataset : XY[];\n    protected currentPos : number;\n\n    constructor(dataset: XY[]) {\n        this.dataset = dataset;\n        this.currentPos = -1;\n    }\n\n    next = () => {\n        this.currentPos++;\n        return this.dataset[ this.currentPos % this.dataset.length ];\n    }\n}\n\nfunction createDataset(from : number, to : number) : XY[] {\n    const results = [];\n\n    for( let i = from; i <= to; i++) {\n        for( let j = from; j <= to; j++) {\n            results.push(new XY(i, j));\n        }\n    }\n\n    return results;\n}\n\nfunction shuffle( items : XY[]) : XY[] {\n    return items\n        .map(value => ({ value, sort: Math.random() }))\n        .sort((a, b) => a.sort - b.sort)\n        .map(({ value }) => value);\n}\n\nclass MultiplicationQuizWidget {\n    protected container : HTMLElement;\n    protected dataset : DataSet;\n    protected scoreBoard: ScoreBoard;\n    protected multiplicationTableWidget : MultiplicationTableWidget;\n\n    protected currentQuestion : XY;\n\n    protected questionElement : HTMLElement;\n    protected answerBoxElement : HTMLInputElement;\n    protected checkButtonElement : HTMLButtonElement;\n    protected messageElement : HTMLElement;\n\n    constructor(container : HTMLElement, dataset: DataSet, scoreBoard: ScoreBoard, multiplicationTableWidget : MultiplicationTableWidget) {\n        this.container = container;\n        this.dataset = dataset;\n        this.scoreBoard = scoreBoard;\n        this.multiplicationTableWidget = multiplicationTableWidget;\n\n        this.createHtmlElements();\n    }\n\n    private createHtmlElements = () => {\n        this.questionElement = document.createElement(\"div\");\n        this.questionElement.id = \"question\";\n\n        this.answerBoxElement = document.createElement(\"input\");\n        this.answerBoxElement.id = \"answer-box\";\n\n        this.answerBoxElement.setAttribute(\"pattern\", \"[0-9]*\");\n        this.answerBoxElement.setAttribute(\"type\", \"number\");\n        this.answerBoxElement.setAttribute(\"inputmode\", \"numeric\");\n        this.answerBoxElement.addEventListener('keypress', this.answerChangedHandler);\n\n        this.checkButtonElement = document.createElement(\"button\");\n        this.checkButtonElement.id = \"check-button\";\n        this.checkButtonElement.innerText = \"Sprawdź!\";\n        this.checkButtonElement.addEventListener('click', this.checkButtonPressedHandler);\n\n        this.messageElement = document.createElement(\"div\");\n        this.messageElement.id = \"result-message\";\n\n        this.container.appendChild(this.questionElement);\n        this.container.appendChild(this.answerBoxElement);\n        this.container.appendChild(this.checkButtonElement);\n        this.container.appendChild(this.messageElement);\n    }\n\n    checkButtonPressedHandler = () => {\n        const answer = parseInt(this.answerBoxElement.value);\n\n        if(isNaN(answer)) {\n            this.clearAnswer();\n        } else {\n            const isCorrectAnswer = answer === this.currentQuestion.result();\n            this.scoreBoard.registerResult(this.currentQuestion, isCorrectAnswer, 5);\n            /* Register x * y and y * x, unless we have x=y and we have x * x */\n            if(this.currentQuestion.x !== this.currentQuestion.y) {\n                this.scoreBoard.registerResult(this.currentQuestion.inverse(), isCorrectAnswer, 5);\n            }\n\n            if(!isCorrectAnswer) {\n                this.showIncorrectAnswerMessage(this.currentQuestion);\n            } else {\n                this.showCorrectAnswerMessage(this.currentQuestion);\n                this.next();\n            }\n\n            this.multiplicationTableWidget.draw();\n        }\n\n        this.answerBoxElement.focus();\n    }\n\n    answerChangedHandler = (event : KeyboardEvent) => {\n        if(event.key === 'Enter' || event.keyCode === 13) {\n            this.checkButtonPressedHandler();\n            return;\n        }\n        this.setMessage(\"\");\n    }\n\n    next = () => {\n        /* Select next multiplication */\n        this.currentQuestion = this.dataset.next();\n        /* Render the question */\n        this.setQuestion(this.currentQuestion);\n        this.clearAnswer();\n    }\n\n    private setQuestion = (xy: XY) => {\n        this.questionElement.innerHTML = \"<span class='number'>\" + xy.x + \"</span> x <span class='number'>\" + xy.y + \"</span> = \";\n    }\n\n    private clearAnswer() {\n        this.answerBoxElement.value = \"\";\n    }\n\n    private setMessage = (message : string ) => {\n        this.messageElement.innerHTML = message;\n    }\n\n    private showIncorrectAnswerMessage(currentQuestion: XY) {\n        this.setMessage(\"Zły wynik\");\n        this.messageElement.classList.remove(\"result-correct\");\n        this.messageElement.classList.add(\"result-incorrect\");\n    }\n\n    private showCorrectAnswerMessage(currentQuestion: XY) {\n        this.setMessage(\"Poprawny wynik!\");\n        this.messageElement.classList.add(\"result-correct\");\n        this.messageElement.classList.remove(\"result-incorrect\");\n    }\n}\n\nclass MultiplicationTableWidget {\n    protected scoreboard : ScoreBoard;\n    protected container : HTMLElement;\n    protected table : HTMLTableElement;\n\n    protected xy : XY;\n\n    protected from : number;\n    protected to : number;\n\n    constructor(from : number, to : number, scoreboard: ScoreBoard, container : HTMLElement) {\n        this.from = from;\n        this.to = to;\n        this.scoreboard = scoreboard;\n        this.container = container;\n\n        this.createTable();\n        this.draw();\n    }\n\n    private createTable = () => {\n        this.table = document.createElement(\"table\") as HTMLTableElement;\n        this.table.id = \"scoreboard-widget\";\n        this.container.appendChild(this.table);\n\n        /* Create header */\n        const header = this.table.createTHead();\n        const headerRow = header.insertRow();\n\n        const topLeftHeaderCell = headerRow.insertCell();\n\n        /* Create header */\n        for(let x = this.from; x <= this.to; x++ ) {\n            let cell = headerRow.insertCell();\n            cell.innerText = \"\" + x;\n        }\n\n        /* Create rows */\n        for(let y = this.from; y <= this.to; y++) {\n            let yRow = this.table.insertRow();\n            let rowLabelCell = yRow.insertCell();\n            rowLabelCell.innerText = \"\" + y;\n\n            for( let x = this.from; x <= this.to; x++) {\n                let cell = yRow.insertCell();\n                cell.innerText = \"?\";\n                cell.id = this.getCellId(y, x);\n            }\n        }\n    }\n\n    draw = () => {\n        this.scoreboard.scoreboard.forEach( multiplicationHistory => {\n            let correctAnswers = 0;\n            let incorrectAnswers = 0;\n            multiplicationHistory.history.forEach( (entry :XYMultiplicationHistoryEntry) => {\n                if(entry.resultCorrect) {\n                    correctAnswers++;\n                } else {\n                    incorrectAnswers++;\n                }\n            });\n\n\n\n            const value = \"\" + correctAnswers + \" / \" + incorrectAnswers;\n            const percCorrect = correctAnswers / (correctAnswers + incorrectAnswers);\n            this.setCellValue(multiplicationHistory.xy, value, percCorrect);\n        });\n    }\n\n    setCellValue = (xy : XY, value : string, percCorrect : number) => {\n        const percCorrectRoundDown = Math.floor(percCorrect * 10) * 10;\n\n        const cell = document.getElementById( this.getCellId(xy.x, xy.y));\n        cell.innerHTML = value;\n        cell.classList.forEach( theClass => cell.classList.remove(theClass));\n        cell.classList.add(\"perc-\" + percCorrectRoundDown);\n    }\n\n    getCellId = (x : number, y : number ) : string => {\n        return \"scoreboard-widget-cell-\" + y + \"-\" + x;\n    }\n}\n\nconst from = 2;\nconst to = 9;\nconst xys = shuffle( createDataset(from, to) );\n\nconst container = document.getElementById(\"container\");\nconst dataset = new DataSet(xys);\nconst scoreBoard = new ScoreBoard(xys);\nconst multiplicationTableWidget = new MultiplicationTableWidget(from, to, scoreBoard, container);\nconst multiplicationQuizWidget = new MultiplicationQuizWidget(\n    container,\n    dataset,\n    scoreBoard,\n    multiplicationTableWidget\n);\n\nmultiplicationQuizWidget.next();"],"names":[],"sourceRoot":""}